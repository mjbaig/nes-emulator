class t extends HTMLElement{width=256;height=240;offset=0;constructor(){super(),this.value="",this.canvas=document.createElement("canvas"),this.canvas.id="nes-window",this.canvas.width=this.width,this.canvas.height=this.height,this.canvas.style="border:1px solid #000000;",this.context=this.canvas.getContext("2d"),this.imageData=this.context.createImageData(this.width,this.height),window.addEventListener("cpu-tick",(t=>{this.drawFrame(this.offset),this.offset+=1}))}static get observedAttributes(){return["test"]}drawFrame(t){for(var e=0;e<this.width;e++)for(var a=0;a<this.height;a++){var i=4*(a*this.width+e),s=(e+t)%256^(a+t)%256,h=(2*e+t)%256^(2*a+t)%256,n=50+Math.floor(100*Math.random());n=(n+t)%256,this.imageData.data[i]=s,this.imageData.data[i+1]=h,this.imageData.data[i+2]=n,this.imageData.data[i+3]=255}this.context.putImageData(this.imageData,0,0)}attributeChangedCallback(t,e,a){console.log("change detected"),"test"===t&&(this.drawFrame(this.offset),this.offset+=2)}connectedCallback(){console.log("connected"),this.appendChild(this.canvas)}}customElements.define("nes-window",t);(new class{constructor(t){this.nesWindow=t,this.tickEvent=new CustomEvent("cpu-tick",{detail:{hi:1}})}run(){setInterval((()=>{this.tickEvent.detail.hi=this.tickEvent.detail.hi+1,window.dispatchEvent(this.tickEvent)}),10)}}).run();const e={NESWindow:t};export{e as NESEmulator};
